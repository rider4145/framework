-> How to create a maven project
	1. Select File-> click on maven project-> default folder will be selected-> click next 
	2. All archetype will be displayed
	3. search the name "maven-archetype-quickstart"
	4. select the archetype for creation of automation project. Archetype contains all the default project setup
	5. select Artifact id = "maven-archetype-quickstart" and GroupId = "org.apache.maven.archetypes" 
	6. click next -> Enter Project name in ArtifactId field
	7. GroupId -> Is upper hirearchy of Artifact id or parent of artifact id
		Eg: If ArtifactId is either AWS or shopping cart etc., then the GroupId will be Amazon because Amazon owns both the products
		
-> If we want to publish the project we have created, it can be done by providing the group id and artifactid in pom.xml file 
	Eg: Below the group and artifact id for the project from pom.xml file
		<groupId>learning</groupId>
  		<artifactId>selenium_framework</artifactId>
  		<version>0.0.1-SNAPSHOT</version>
 
-> Get selenium maven dependencies to run the project
	Go to Maven repository-> Add Selenum-java dependency-> Add TestNg dependency for the project-> Paste both dependency inside <dependencies> tag
	
-> Created account in https://rahulshettyacademy.com/client to practice
	username = ajith_may_01@gmail.com
	password = Ajith@1234

-> Using WebDriverManager we can invoke the chrome driver. Without invoking the chrome driver from locally
	Go to Maven repository-> Search WebDriverManager-> Get the latest Version and paste in Pom.xml file

-> Page Object classes: It is mainly used to maintain the same locators under single java file and come from different test classes. 
						Locators is again seperated based on the screen name, in which requests can be sent to seperate classes instead of calling same class multiple items
						
-> using page factory we can reduce the syntax of the webelement
-> page object factory locators:

	@FindBy(id = "idValue")						Locate by ID
	@FindBy(name = "nameValue")					Locate by Name
	@FindBy(css = "cssSelector")				Locate by CSS
	@FindBy(xpath = "//tag[@attr='value']")		Locate by XPath
	@FindBy(linkText = "Full Link Text")		Locate by Link Text
	@FindBy(partialLinkText = "Partial")		Locate by Partial Link Text
	
-> general and page object syntax to find any Webelement and assigning
	general syntax: WebElement sock = driver.findElement(By.id("TextBook"));		// this will find the element and assign the value to webelement sock
	page-object syntax:  @FindBy(id="TextBook") WebElement socks 					// using find by element will be found and it will be stored in the webelement defined later in the line of code
	
-> 	To run the multiple test parallely
	define parallel tagname in xml file fo suite and provide whether it should run at which level(test/class/method etc.,)

-> thread count = 1 means one method in the class at a time is allowed to run parallely 

	Eg: For multiple test to run parallely and thread count
	
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
		<suite parallel="tests" name="Suite">								//define parallel and pass the value as test
		  <test thread-count="5" name="standAlonstest2">					//at a time 5 methods can run in this standAloneTest2 java class 
		    <classes>
		      <class name="learning.framework.standAloneTest2"/>
		    </classes>
		  </test> <!-- Test -->
		  
		  <test thread-count="5" name="Errorvalidation">
		  	<classes>
		  		<class name="learning.framework.errorValidation"/>
		  	</classes>
		  </test>
		  
		</suite> <!-- Suite -->
		
-> to run any specific method irrespective of include or exclude ->define in method 
	Syntax: use alwaysRun=true
	
	@BeforeMethod(alwaysRun=true)						// this method will run irrespective of any method because it is set as true
	public Loginpage launchapp() throws IOException 
	{
		driver = initalize();
		l = new Loginpage(driver);
		l.goTo();
		return l;
		
	}
		
		
-> Dataprovider is used to handle defining the params in sepearate method and calling in other method. 
-> It can be acheived by using @DataProvider tag in sender method, in receiver method using dataprovider="methodname"(pass the method name)
	Syntax: @Test(dataProvider="data", groups ="purchase")				// used to call the data provide method and group the methods using name and execute only specific methods
		
-> Instead of using arrays always for defining the params, using hashmap also it can be acheived by defining the key values
	if u need to send multiple times the data, u need to set multiple hashmaps
	
	Syntax: sending the values 
		@DataProvider							
		public Object[][] data()
		{	
			HashMap<Object,Object> map = new HashMap<>();				// define hashmap
			map.put("email", "ajith_may_01@gmail.com");					// setting the values
			map.put("pass", "Ajith@1234");								// setting the values
			map.put("product", "ADIDAS ORIGINAL");						// setting the values
			
			
			HashMap<Object,Object> map1 = new HashMap<>();				// defining multiple hashmap to send another set of values
			map1.put("email", "ajith_may_01@gmail.com");
			map1.put("pass", "Ajith@1234");
			map1.put("product", "ZARA COAT 3");
			
			// pass the values directly without using Hashmap 
			return new Object[][] {{"ajith_may_01@gmail.com","Ajith@1234","ADIDAS ORIGINAL"},{"ajith_may_01@gmail.com","Ajith@1234","ZARA COAT 3"}};
			
			// pass the values using hashmap
			return new Object[][] {{map},{map1}};			//passing multiple hashmap values using object
		}

	Syntax: receiving the values
	@Test(dataProvider="data", groups ="purchase")										// pass the method name where the data provider is created
	public void submitorder(String email, String pass, String pr) throws IOException	// fetching the values directly from dataprovider method
	public void submitorder(HashMap<String,String> input) throws IOException			//  fetching the values directly from dataprovider method using hashmap
		
-> Passing the values using json
	1. create package and create a file inside the package-> save with extension as json format
	2. open the file and create a array and set the values inside the array
	Syntax:
	[
		{
			"email":"ajith_may_01@gmail.com",
			"pass":"Ajith@1234",
			"product":"ADIDAS ORIGINAL"
		},
		{
			"email":"ajith_may_01@gmail.com",
			"pass":"Ajith@1234",
			"product":"ZARA COAT 3"		
		}
	]
	3. Create a utility/method which create a hashmaps out of json file
	
	
-> Listeners has to be defined in the xml file to execute





-> Execute the maven using cmd line 
	1. download the apache maven src file and extract the binary zip file
	2. set up the environmental variables
	3. set the file path in Maven_Home
	4. set the bin folder path in the path environmental variable
	5. do version check using cmd mvn -version
	6. search to maven testng integration in google and go to 1t site and copy the suites xml code 
	7. open the pom.xml file in the project
	8. create profiles tag below dependencies tag , we can create multiple profile in it
	9. using profile we can execute the maven projects xml file
	
-> Syntax to create a the profile:
	<profiles>									// profiles
		<profile>								//1st profile
		 <id>Regression</id>					// id is used to differentiate the each xml testng xml file and used to execute
		  <build>
    	   <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
     		<plugins>
	       	 <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-surefire-plugin</artifactId>
		        <version>3.5.3</version>
		        <configuration>
		          <suiteXmlFiles>
		            <suiteXmlFile>testSuites/testng.xml</suiteXmlFile>		// pass the testng xml file name with the folder name in it
		          </suiteXmlFiles>
		        </configuration>
		      </plugin>
	    	 </plugins>
	       </pluginManagement>
	     </build>     
	   </profile>
	  </profiles>
		
-> cmd to execute the testng xml file using cmd prompt:
	1. naviagte to project file and open the cmd prompt 
	2. use the cmd to run the tests with keyword test -> mvn test (it will execute all the test with keyword test)
	3. to run specific testng xml file using profile
		syntax: mvn test -PRegression ( P stands for profile and Regression is the id name provided in the profile)
	4. 
	
	
	